{"version":3,"file":"index.modern.js","sources":["../src/resources/error.ts","../src/request.ts","../src/resources/point.ts","../src/resources/stations.ts","../src/models/common.ts","../src/index.ts"],"sourcesContent":["export class MeteostatError {\n  message: string\n  status: number\n  statusText: string\n\n  constructor(error: Response) {\n    this.status = error.status\n    this.statusText = error.statusText\n  }\n}\n\nexport class BadRequestError extends MeteostatError {\n  constructor(error: Response) {\n    super(error)\n    this.message = 'Please check the query parameters'\n  }\n}\n\nexport class UnauthorizedError extends MeteostatError {\n  constructor(error: Response) {\n    super(error)\n    this.message = 'Make sure to send a valid RapidAPI key'\n  }\n}\n\nexport class ForbiddenError extends MeteostatError {\n  constructor(error: Response) {\n    super(error)\n    this.message = \"You're not allowed to access this endpoint\"\n  }\n}\n\nexport class NotFoundError extends MeteostatError {\n  constructor(error: Response) {\n    super(error)\n    this.message = \"This endpoint doesn't exist\"\n  }\n}\n\nexport class TooManyRequestsError extends MeteostatError {\n  constructor(error: Response) {\n    super(error)\n    this.message = \"You've exceeded the quota\"\n  }\n}\n\nexport class ServiceTemporarilyUnavailableError extends MeteostatError {\n  constructor(error: Response) {\n    super(error)\n    this.message = 'The API is currently down'\n  }\n}\n","import 'isomorphic-fetch'\n\nimport { MeteostatResponse } from './models'\nimport {\n  BadRequestError,\n  ForbiddenError,\n  NotFoundError,\n  ServiceTemporarilyUnavailableError,\n  TooManyRequestsError,\n  UnauthorizedError,\n} from './resources/error'\n\nexport type RequestParams = {\n  uri: string\n  params: Record<string, unknown>\n}\n\nexport class Request {\n  request: (params: RequestParams) => Promise<Response>\n\n  constructor(apiKey: string) {\n    this.request = ({ uri, params }: RequestParams): Promise<Response> => {\n      const query: string = new URLSearchParams(\n        Object.entries(params).reduce(\n          (acc, [key, value]) => ({ ...acc, [key]: String(value) }),\n          {},\n        ),\n      ).toString()\n      return fetch(`https://meteostat.p.rapidapi.com/${uri}?${query}`, {\n        headers: {\n          'x-rapidapi-host': 'meteostat.p.rapidapi.com',\n          'x-rapidapi-key': apiKey,\n        },\n      })\n    }\n  }\n\n  public async makeApiRequest(\n    uri: RequestParams['uri'],\n    params: RequestParams['params'],\n  ): Promise<MeteostatResponse> {\n    try {\n      const response = await this.request({\n        uri,\n        params,\n      })\n      if (!response.ok) {\n        throw response\n      }\n      return response.json() as Promise<MeteostatResponse>\n    } catch (error) {\n      switch (error?.status) {\n        case 400:\n          throw new BadRequestError(error)\n        case 401:\n          throw new UnauthorizedError(error)\n        case 403:\n          throw new ForbiddenError(error)\n        case 404:\n          throw new NotFoundError(error)\n        case 429:\n          throw new TooManyRequestsError(error)\n        case 503:\n          throw new ServiceTemporarilyUnavailableError(error)\n        default:\n          throw error\n      }\n    }\n  }\n}\n","import {\n  PointDailyRequest,\n  PointDailyResponse,\n  PointHourlyRequest,\n  PointHourlyResponse,\n  PointMonthlyRequest,\n  PointMonthlyResponse,\n  PointNormalsRequest,\n  PointNormalsResponse,\n} from '../models/point'\nimport { Request } from '../request'\n\nexport class Point {\n  private readonly request: Request\n\n  constructor(request: Request) {\n    this.request = request\n  }\n\n  async daily(params: PointDailyRequest): Promise<PointDailyResponse> {\n    return await this.request.makeApiRequest('point/daily', params)\n  }\n\n  async hourly(params: PointHourlyRequest): Promise<PointHourlyResponse> {\n    return await this.request.makeApiRequest('point/hourly', params)\n  }\n\n  async monthly(params: PointMonthlyRequest): Promise<PointMonthlyResponse> {\n    return await this.request.makeApiRequest('point/monthly', params)\n  }\n\n  async normals(params: PointNormalsRequest): Promise<PointNormalsResponse> {\n    return await this.request.makeApiRequest('point/normals', params)\n  }\n}\n","import {\n  StationsDailyRequest,\n  StationsDailyResponse,\n  StationsHourlyRequest,\n  StationsHourlyResponse,\n  StationsMetaRequest,\n  StationsMetaResponse,\n  StationsMonthlyRequest,\n  StationsMonthlyResponse,\n  StationsNearbyRequest,\n  StationsNearbyResponse,\n  StationsNormalsRequest,\n  StationsNormalsResponse,\n} from '../models/stations'\nimport { Request } from '../request'\n\nexport class Stations {\n  private readonly request: Request\n\n  constructor(request: Request) {\n    this.request = request\n  }\n\n  async daily(params: StationsDailyRequest): Promise<StationsDailyResponse> {\n    return await this.request.makeApiRequest('stations/daily', params)\n  }\n\n  async hourly(params: StationsHourlyRequest): Promise<StationsHourlyResponse> {\n    return await this.request.makeApiRequest('stations/hourly', params)\n  }\n\n  async meta(params: StationsMetaRequest): Promise<StationsMetaResponse> {\n    return await this.request.makeApiRequest('stations/meta', params)\n  }\n\n  async monthly(\n    params: StationsMonthlyRequest,\n  ): Promise<StationsMonthlyResponse> {\n    return await this.request.makeApiRequest('stations/monthly', params)\n  }\n\n  async nearby(params: StationsNearbyRequest): Promise<StationsNearbyResponse> {\n    return await this.request.makeApiRequest('stations/nearby', params)\n  }\n  async normals(\n    params: StationsNormalsRequest,\n  ): Promise<StationsNormalsResponse> {\n    return await this.request.makeApiRequest('stations/normals', params)\n  }\n}\n","export interface Inventory {\n  model?: {\n    start: string\n    end: string\n  }\n  hourly?: {\n    start: string\n    end: string\n  }\n  daily?: {\n    start: string\n    end: string\n  }\n  monthly?: { start: number; end: number }\n  normals?: { start: number; end: number }\n}\n\nexport interface Identifier {\n  national: string\n  wmo: string\n  icao: string\n}\nexport interface Location {\n  latitude: number\n  longitude: number\n  elevation: number\n}\nexport interface Meta {\n  source?: string\n  start?: number\n  end?: number\n  exec_time: number\n  generated: string\n}\n\nexport interface Name {\n  [key: string]: string\n}\n\nexport interface MeteostatResponse {\n  meta: Meta\n  data: any\n}\n\nexport type Units = 'metric' | 'imperial' | 'scientific'\n\nexport enum WeatherConditionCode {\n  Clear = 1,\n  Fair = 2,\n  Cloudy = 3,\n  Overcast = 4,\n  Fog = 5,\n  FreezingFog = 6,\n  LightRain = 7,\n  Rain = 8,\n  HeavyRain = 9,\n  FreezingRain = 10,\n  HeavyFreezingRain = 11,\n  Sleet = 12,\n  HeavySleet = 13,\n  LightSnowfall = 14,\n  Snowfall = 15,\n  HeavySnowfall = 16,\n  RainShower = 17,\n  HeavyRainShower = 18,\n  SleetShower = 19,\n  HeavySleetShower = 20,\n  SnowShower = 21,\n  HeavySnowShower = 22,\n  Lightning = 23,\n  Hail = 24,\n  Thunderstorm = 25,\n  HeavyThunderstorm = 26,\n  Storm = 27,\n}\n","import { Request } from './request'\nimport { Point } from './resources/point'\nimport { Stations } from './resources/stations'\n\nexport * from './models'\n\nexport class Meteostat {\n  private readonly request: Request\n  point: Point\n  stations: Stations\n\n  constructor(apiKey: string) {\n    this.request = new Request(apiKey)\n    this.point = new Point(this.request)\n    this.stations = new Stations(this.request)\n  }\n}\n"],"names":["MeteostatError","constructor","error","message","status","statusText","this","BadRequestError","super","UnauthorizedError","ForbiddenError","NotFoundError","TooManyRequestsError","ServiceTemporarilyUnavailableError","Request","apiKey","request","uri","params","query","URLSearchParams","Object","entries","reduce","acc","key","value","String","toString","fetch","headers","async","response","ok","json","Point","makeApiRequest","Stations","WeatherConditionCode","Meteostat","point","stations"],"mappings":"+OAAaA,EAKXC,YAAYC,QAJZC,oBACAC,mBACAC,kBAGEC,KAAKF,OAASF,EAAME,OACpBE,KAAKD,WAAaH,EAAMG,kBAIfE,UAAwBP,EACnCC,YAAYC,GACVM,MAAMN,GACNI,KAAKH,QAAU,2CAINM,UAA0BT,EACrCC,YAAYC,GACVM,MAAMN,GACNI,KAAKH,QAAU,gDAINO,UAAuBV,EAClCC,YAAYC,GACVM,MAAMN,GACNI,KAAKH,QAAU,oDAINQ,UAAsBX,EACjCC,YAAYC,GACVM,MAAMN,GACNI,KAAKH,QAAU,qCAINS,UAA6BZ,EACxCC,YAAYC,GACVM,MAAMN,GACNI,KAAKH,QAAU,mCAINU,UAA2Cb,EACtDC,YAAYC,GACVM,MAAMN,GACNI,KAAKH,QAAU,mCChCNW,EAGXb,YAAYc,QAFZC,eAGEV,KAAKU,QAAU,EAAGC,IAAAA,EAAKC,OAAAA,MACrB,MAAMC,EAAgB,IAAIC,gBACxBC,OAAOC,QAAQJ,GAAQK,OACrB,CAACC,GAAMC,EAAKC,UAAiBF,GAAKC,CAACA,GAAME,OAAOD,KAChD,KAEFE,WACF,OAAOC,0CAA0CZ,KAAOE,IAAS,CAC/DW,QAAS,CACP,kBAAmB,2BACnB,iBAAkBf,MAMCgB,qBACzBd,EACAC,GAEA,IACE,MAAMc,aAAsBhB,QAAQ,CAClCC,IAAAA,EACAC,OAAAA,IAEF,IAAKc,EAASC,GACZ,MAAMD,EAER,OAAOA,EAASE,OAChB,MAAOhC,GACP,aAAQA,SAAAA,EAAOE,QACb,SACE,UAAUG,EAAgBL,GAC5B,SACE,UAAUO,EAAkBP,GAC9B,SACE,UAAUQ,EAAeR,GAC3B,SACE,UAAUS,EAAcT,GAC1B,SACE,UAAUU,EAAqBV,GACjC,SACE,UAAUW,EAAmCX,GAC/C,QACE,MAAMA,WCrDHiC,EAGXlC,YAAYe,QAFKA,eAGfV,KAAKU,QAAUA,EAGNe,YAACb,GACV,kBAAkBF,QAAQoB,eAAe,cAAelB,GAG9Ca,aAACb,GACX,kBAAkBF,QAAQoB,eAAe,eAAgBlB,GAG9Ca,cAACb,GACZ,kBAAkBF,QAAQoB,eAAe,gBAAiBlB,GAG/Ca,cAACb,GACZ,kBAAkBF,QAAQoB,eAAe,gBAAiBlB,UChBjDmB,EAGXpC,YAAYe,QAFKA,eAGfV,KAAKU,QAAUA,EAGNe,YAACb,GACV,kBAAkBF,QAAQoB,eAAe,iBAAkBlB,GAGjDa,aAACb,GACX,kBAAkBF,QAAQoB,eAAe,kBAAmBlB,GAGpDa,WAACb,GACT,kBAAkBF,QAAQoB,eAAe,gBAAiBlB,GAG/Ca,cACXb,GAEA,kBAAkBF,QAAQoB,eAAe,mBAAoBlB,GAGnDa,aAACb,GACX,kBAAkBF,QAAQoB,eAAe,kBAAmBlB,GAEjDa,cACXb,GAEA,kBAAkBF,QAAQoB,eAAe,mBAAoBlB,ICDrDoB,IAAAA,GAAZ,SAAYA,GACVA,qBACAA,mBACAA,uBACAA,2BACAA,iBACAA,iCACAA,6BACAA,mBACAA,6BACAA,oCACAA,8CACAA,sBACAA,gCACAA,sCACAA,4BACAA,sCACAA,gCACAA,0CACAA,kCACAA,4CACAA,gCACAA,0CACAA,8BACAA,oBACAA,oCACAA,8CACAA,sBA3BF,CAAYA,IAAAA,aCxCCC,EAKXtC,YAAYc,QAJKC,oBACjBwB,kBACAC,gBAGEnC,KAAKU,QAAU,IAAIF,EAAQC,GAC3BT,KAAKkC,MAAQ,IAAIL,EAAM7B,KAAKU,SAC5BV,KAAKmC,SAAW,IAAIJ,EAAS/B,KAAKU"}